#!/bin/sh

main() {
  for __sql_file in ./sql/2_query/*.sql; do
    # Create temp file
    __temp_file_path="$(mktemp)" || return "$?"

    __file_path_without_extension="./sql/2_query/$(basename "${__sql_file}" .sql)" || return "$?"

    # Execute explain for TEXT format
    echo "Getting Query Plan..." >&2
    __file_text="${__file_path_without_extension}.log"
    sed -E 's/^SELECT/EXPLAIN (FORMAT TEXT) SELECT/' "${__sql_file}" > "${__temp_file_path}" || return "$?"
    ./shell/psql.sh "${__temp_file_path}" | grep -v 'You are now connected to database' > "${__file_text}" || return "$?"
    echo "Getting Query Plan: success!" >&2

    # # Execute explain for JSON format
    # __file_json="${__file_path_without_extension}.json"
    # sed -E 's/^SELECT/EXPLAIN (FORMAT JSON) SELECT/' "${__sql_file}" > "${__temp_file_path}" || return "$?"
    # ./shell/psql.sh "${__temp_file_path}" | sed -En 's/^   (.*[^ ]+) +\+$/\1/p' > "${__file_json}" || return "$?"

    echo "Generating request..." >&2
    cat << EOF | tee "${__temp_file_path}" > /dev/null || return "$?"
{
  "plan": "$(cat "${__file_text}" | tr '\n' '\r' | sed 's/\r/\\n/g')"
}
EOF
    echo "Generating request: success!" >&2

    # We pass our plan to "explain.tensor.ru" for it to make it in colorful HTML
    echo "Passing Query Plan to \"explain.tensor.ru\"..." >&2
    __response="$(
      curl --fail --silent --show-error -X POST https://explain.tensor.ru/explain \
        -H "Content-Type: application/json" \
        -d @"${__temp_file_path}"
    )" || return "$?"
    echo "Passing Query Plan to \"explain.tensor.ru\": success!" >&2

    # Then we get HTML link
    echo "Getting HTML link..." >&2
    __url_explained="$(echo "${__response}" | sed -En 's/^Found. Redirecting to (.+)$/\1/p')" || return "$?"
    if [ -z "${__url_explained}" ]; then
      echo "Failed to get URL from response! Response:
${__response}" >&2
      return 1
    fi
    echo "Getting HTML link: success!" >&2

    # Because colored HTML is generated by JavaScript on page load, we use headless browser to get it
    echo "Getting HTML..." >&2
    __html="$(./venv/bin/python ./python/explain_query_plan.py "https://explain.tensor.ru${__url_explained}#parsed")" || return "$?"
    echo "Getting HTML: success!" >&2

    echo "Getting HTML pre tag content..." >&2
    __html_pre_tag_content="$(echo "${__html}" | tr '\n' '\r' | sed -En 's/^.+(<pre id="parsed_pl" class="expl">([^<]*<\/?span[^>]*>)+[^<]+<\/pre>).+/\1/p' | tr '\r' '\n')" || return "$?"
    if [ -z "${__html_pre_tag_content}" ]; then
      echo "Failed to get HTML pre tag content" >&2
      return 1
    fi
    echo "Getting HTML pre tag content: success!" >&2

    echo "Saving HTML file..." >&2
    __file_html="${__file_path_without_extension}.html"
    cat << EOF | tee "${__file_html}" > /dev/null || return "$?"
<html lang="en">
  <head>
    <title>Query Plan</title>
    <link href="./explain.css" rel="stylesheet">
  </head>
  <body style="font-size: 24pt; background-color: #1b1b1b">
    ${__html_pre_tag_content}
  </body>
</html>
EOF
    echo "Saving HTML file: success!" >&2

    # Clear temp file
    rm "${__temp_file_path}"
  done
}

main "${@}" || exit "$?"
